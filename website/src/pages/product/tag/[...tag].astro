---
// src/pages/blog/tag/[tag].astro
import { getAllPosts, getPostsByTag, getUniqueTags } from '../../../lib/fetchpost.ts';
// import '../../../styles/blog.css'; // If using shared CSS

// Generate paths for each unique tag
export async function getStaticPaths() {
  const posts = await getAllPosts();
  const uniqueTags = getUniqueTags(posts);

  return Object.keys(uniqueTags).map(slug => ({
    params: { tag: slug }
  }));
}

const posts = await getAllPosts();
const uniqueTags: Record<string, string> = getUniqueTags(posts);
const tagSlug = String(Astro.params.tag);
const tagName = uniqueTags[tagSlug] || 'Unknown';
const filteredPosts = getPostsByTag(posts, tagSlug);

// Truncate helper
function truncateContent(content: string, maxLength = 150) {
  if (content.length <= maxLength) return content;
  return content.slice(0, maxLength).trim() + '...';
}
---

<html lang="en">
<head>
  <title>Posts tagged "{tagName}"</title>
  <meta charset="utf-8" />
  <style>
    /* Reuse shared styles + page-specific */
    :root {
      --primary-color: #007acc;
      --bg-color: #ffffff;
      --text-color: #333333;
      --border-color: #e0e0e0;
      --font-stack: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, 'Noto Sans', 'Hiragino Sans', 'Microsoft YaHei', sans-serif;
    }

    * { box-sizing: border-box; }
    body {
      font-family: var(--font-stack);
      line-height: 1.6;
      color: var(--text-color);
      max-width: 800px;
      margin: 0 auto;
      padding: 1rem;
      background: var(--bg-color);
    }

    h1, h2 { color: var(--primary-color); }
    a { color: var(--primary-color); text-decoration: none; }
    a:hover { text-decoration: underline; }

    .tag-header {
      background: #f9f9f9;
      border: 1px solid var(--border-color);
      border-radius: 8px;
      padding: 1.5rem;
      margin-bottom: 2rem;
      text-align: center;
    }

    .tag-header h1 {
      margin: 0 0 0.5rem;
      font-size: 2rem;
    }

    .tag-count {
      color: #666;
      font-size: 1.1rem;
    }

    .post-card {
      background: #f9f9f9;
      border: 1px solid var(--border-color);
      border-radius: 8px;
      padding: 1.5rem;
      margin-bottom: 1rem;
      transition: box-shadow 0.2s ease;
    }

    .post-card:hover {
      box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
    }

    .post-title { font-size: 1.4rem; margin: 0 0 0.5rem; }
    .post-tags {
      display: inline-block;
      background: var(--primary-color);
      color: white;
      padding: 0.25rem 0.5rem;
      border-radius: 4px;
      font-size: 0.9rem;
      margin-left: 1rem;
      margin-bottom: 0.5rem;
    }

    .post-preview {
      font-size: 0.95rem;
      color: #666;
      margin: 0.5rem 0 0;
      line-height: 1.5;
    }

    .back-link {
      display: inline-block;
      margin-bottom: 1rem;
      padding: 0.5rem 1rem;
      background: var(--primary-color);
      color: white;
      border-radius: 4px;
    }

    .posts-list { max-width: 700px; margin: 0 auto; }
  </style>
</head>
<body>
  <header class="tag-header">
    <h1>Posts tagged "{tagName}"</h1>
    <p class="tag-count">{filteredPosts.length} post{filteredPosts.length !== 1 ? 's' : ''}</p>
    <a href="/product/" class="back-link">‚Üê Back to All Posts</a>
  </header>

  <main class="posts-list">
    {filteredPosts.length === 0 ? (
      <p>No posts found for this tag.</p>
    ) : (
      filteredPosts.map((post) => (
        <article class="post-card" data-slug={post.id}>
          <h2 class="post-title">
            <a href={`/product/${post.id}`}>
              {post.title}
            </a>
          </h2>
          {post.tags.length > 0 && (
            <span class="post-tags">{post.tags.map((tag: { name: any; }) => tag.name).join(', ')}</span>
          )}
          <p class="post-preview">{truncateContent(post.content)}</p>
        </article>
      ))
    )}
  </main>
</body>
</html>
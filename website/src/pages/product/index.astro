---
// src/pages/blog/index.astro
import { getAllPosts, getTagFrequencies } from '../../lib/fetchpost.ts';

const posts = await getAllPosts();
const tagFreq = getTagFrequencies(posts);

// Helper to truncate content
function truncateContent(content, maxLength = 150) {
  if (content.length <= maxLength) return content;
  return content.slice(0, maxLength).trim() + '...';
}

// Unique tags for cloud (sorted by freq desc)
const uniqueTags = Object.entries(tagFreq)
  .map(([slug, count]) => ({ slug, name: posts.find(p => p.tags.some(t => t.slug === slug))?.tags.find(t => t.slug === slug)?.name || slug, count }))
  .sort((a, b) => b.count - a.count);
---

<html lang="en">
<head>
  <title>Blog Homepage</title>
  <meta charset="utf-8" />
  <style>
    /* Existing styles + layout */
    body {
      display: flex;
      max-width: 1200px;
      margin: 0 auto;
      padding: 1rem;
      gap: 2rem;flex-direction: row;
    flex-wrap: wrap;
    }

    main {
      flex: 2;
    }

    aside {
      flex: 1;
      min-width: 200px;
    }

    .post-card {
      background: #f9f9f9;
      border: 1px solid var(--border-color);
      border-radius: 8px;
      padding: 1.5rem;
      margin-bottom: 1rem;
      transition: box-shadow 0.2s ease;
    }

    .post-card:hover {
      box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
      transform: translateY(-2px);
    }

    .post-title {
      font-size: 1.4rem;
      margin: 0 0 0.5rem;
    }

    .post-tags {
      display: inline-block;
      background: var(--primary-color);
      color: white;
      padding: 0.25rem 0.5rem;
      border-radius: 4px;
      font-size: 0.9rem;
      margin-left: 1rem;
      margin-bottom: 0.5rem;
    }

    .post-preview {
      font-size: 0.95rem;
      color: #666;
      margin: 0.5rem 0 0;
      line-height: 1.5;
    }

    .posts-grid {
      display: grid;
      gap: 1rem;
    }

    @media (min-width: 600px) {
      .posts-grid {
        grid-template-columns: 1fr 1fr;
      }
    }

    .post-link {
      display: block;
      text-decoration: none;
      color: inherit;
      width: 100%;
      height: 100%;
    }

    .post-link:hover .post-card {
      box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
    }

    .post-link em {
      color: #999;
      font-style: italic;
      font-size: 0.9em;
    }

    /* Word Cloud Styles */
    .word-cloud {
      background: #f0f0f0;
      padding: 1rem;
      border-radius: 8px;
      height: fit-content;
    }

    .word-cloud h3 {
      margin-top: 0;
      text-align: center;
    }

    .word-cloud ul {
      list-style: none;
      padding: 0;
      display: flex;
      flex-wrap: wrap;
      gap: 0.5rem;
      justify-content: center;
    }

    .word-cloud li {
      margin: 0;
    }

    .word-cloud a {
      display: inline-block;
      padding: 0.25rem 0.5rem;
      background: var(--primary-color);
      color: white;
      text-decoration: none;
      border-radius: 4px;
      font-size: 1rem; /* Base */
      transition: transform 0.2s ease;
      /* Size by frequency: max 2rem, min 0.8rem */
    }

    .word-cloud a:hover {
      transform: scale(1.1);
      text-decoration: underline;
    }

    /* Dynamic sizing in JS-like calc, but static: use classes or inline style */
    /* For simplicity, use inline style for font-size */
  </style>
</head>
<body>
  <header>
    <h1>All Blog Posts</h1>
    <p>Total posts: {posts.length}</p>
  </header>
 <aside>
      <div class="word-cloud">
        <h3>Tag Cloud</h3>
        {uniqueTags.length === 0 ? (
          <p>No tags.</p>
        ) : (
          <ul>
            {uniqueTags.map(tag => (
              <li key={tag.slug}>
                <a 
                  href={`/product/tag/${tag.slug}`}
                  style={`font-size: ${Math.max(0.8, 1 + (tag.count * 0.2))}rem;`}
                >
                  {tag.name}
                </a>
              </li>
            ))}
          </ul>
        )}
      </div>
    </aside>
  <div class="layout">
    <main class="posts-grid">
      {posts.length === 0 ? (
        <p>No posts found.</p>
      ) : (
        posts.map((post, index) => {
          const isUntitled = !post.title || post.title === 'Untitled Post';
          const preview = truncateContent(post.content);
          return (
            <a href={`/product/${post.id}`} class="post-link" key={post.id}>  <!-- Use post.id for direct link -->
              <article class="post-card">
                <h2 class="post-title">
                  {post.title}
                  {isUntitled && <em> (Untitled)</em>}
                </h2>
                {post.tags.length > 0 && (
                  <span class="post-tags">{post.tags.map(t => t.name).join(', ')}</span>
                )}
                <p class="post-preview">{preview}</p>
              </article>
            </a>
          );
        })
      )}
    </main>

   
  </div>
</body>
</html>